mvrnorm(n=N,
mu=c(0, 0),
Sigma=matrix(c(sigma0, sigma_01, sigma_01, sigma1),
ncol=2))
)
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
set.seed(1)
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
C = 3
wage = data.table(
mvrnorm(n=N,
mu=c(0, 0),
Sigma=matrix(c(sigma0, sigma_01, sigma_01, sigma1),
ncol=2))
)
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
View(wage)
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(w1)]
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = wage[, mean(Nu)]
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_01 * ()
sigma_nu = wage[, mean(Nu)]
sigma_nu = wage[, sd(Nu)]
dnorm(0)
dnorm(1)
pnorm(0)
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = wage[, sd(Nu)]
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
print(E_w0_I)
print(calc_Q0)
print(E_w1_I)
print(calc_Q1)
set.seed(1)
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
C = 3
wage = data.table(
mvrnorm(n=N,
mu=c(0, 0),
Sigma=matrix(c(sigma0, sigma_01, sigma_01, sigma1),
ncol=2))
)
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = wage[, sd(Nu)]
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
print(E_w0_I)
print(calc_Q0)
print(E_w1_I)
print(calc_Q1)
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
C = 3
wage = data.table(
mvrnorm(n=N,
mu=c(0, 0),
Sigma=matrix(c(sigma0, sigma_01, sigma_01, sigma1),
ncol=2))
)
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = wage[, sd(Nu)]
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
print(E_w0_I)
print(calc_Q0)
print(E_w1_I)
print(calc_Q1)
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
sigma_matrix = matrix(c(sigma0, sigma_01,
sigma_01, sigma1),
ncol=2)
C = 3
wage = data.table(
mvrnorm(n=N,mu=c(0, 0),Sigma=sigma_matrix)
)
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = wage[, sd(Nu)]
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
print(E_w0_I)
print(calc_Q0)
print(E_w1_I)
print(calc_Q1)
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = sqrt( sigma0^2 + sigma1^2 - 2 * sigma_01 )
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
print(E_w0_I)
print(calc_Q0)
print(E_w1_I)
print(calc_Q1)
sigma_nu
wage[, sd(Nu)]
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
sigma_matrix = matrix(c(sigma0^2, sigma_01,
sigma_01, sigma1^2),
ncol=2)
C = 3
wage = data.table(
mvrnorm(n=N,mu=c(0, 0),Sigma=sigma_matrix)
)
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = sqrt( sigma0^2 + sigma1^2 - 2 * sigma_01 )
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
print(E_w0_I)
print(calc_Q0)
print(E_w1_I)
print(calc_Q1)
library(MASS)
library(data.table)
library(dplyr)
## Parameters settings
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
sigma_matrix = matrix(c(sigma0^2, sigma_01,
sigma_01, sigma1^2),
ncol=2)
C = 3
## Creating error terms, saving to data.table
wage = data.table(
mvrnorm(n=N,mu=c(0, 0),Sigma=sigma_matrix)
)
## Rename
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
## Creating variables
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
## Calculating the empirical conditional mean
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate the theoretical value
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = sqrt( sigma0^2 + sigma1^2 - 2 * sigma_01 )
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
## According to formula
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
## Compare
result = data.frame(E_0 = c(E_w0_I, calc_Q0), E_1 = c(E_w1_I, calc_Q1))
View(result)
knitr::kable(result)
install.packages("kableExtra")
kbl(result, booktabs=T)
library(kableExtra)
kbl(result, booktabs=T)
rownames(result) = c("Empirical", "Theoretical")
kbl(result, booktabs=T)
print(xtable(result, type = "latex"), file = "filename2.tex")
install.packages("xtable")
library(xtable)
print(xtable(result, type = "latex"), file = "filename2.tex")
setwd("~/111-1/Labor Economic/HW1/src")
library(MASS)
library(data.table)
library(dplyr)
library(xtable)
setwd("~/111-1/Labor Economic/HW1/src")
## Parameters settings
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
sigma_matrix = matrix(c(sigma0^2, sigma_01,
sigma_01, sigma1^2),
ncol=2)
C = 3
## Creating error terms, saving to data.table
wage = data.table(
mvrnorm(n=N,mu=c(0, 0),Sigma=sigma_matrix)
)
## Rename
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
## Creating variables
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
## Calculating the empirical conditional mean
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate the theoretical value
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = sqrt( sigma0^2 + sigma1^2 - 2 * sigma_01 )
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
## According to formula
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
## Compare
result = data.frame(E_0 = c(E_w0_I, calc_Q0), E_1 = c(E_w1_I, calc_Q1))
rownames(result) = c("Empirical", "Theoretical")
print(xtable(result, type = "latex"), file = "filename2.tex")
library(MASS)
library(data.table)
library(dplyr)
library(xtable)
setwd("~/111-1/Labor Economic/HW1/src")
## Parameters settings
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
sigma_matrix = matrix(c(sigma0^2, sigma_01,
sigma_01, sigma1^2),
ncol=2)
C = 3
## Creating error terms, saving to data.table
wage = data.table(
mvrnorm(n=N,mu=c(0, 0),Sigma=sigma_matrix)
)
## Rename
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
## Creating variables
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
## Calculating the empirical conditional mean
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate the theoretical value
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = sqrt( sigma0^2 + sigma1^2 - 2 * sigma_01 )
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
## According to formula
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
## Compare
result = data.frame("$E_0$" = c(E_w0_I, calc_Q0), "$E_1$" = c(E_w1_I, calc_Q1))
rownames(result) = c("Empirical", "Theoretical")
print(xtable(result, type = "latex"), file = "filename2.tex")
print(xtable(result, type = "latex", sanitize.text.function = function(x){x}), file = "filename2.tex")
print(xtable(result, type = "latex"),sanitize.text.function = function(x){x}, file = "filename2.tex")
print(xtable(result, type = "latex"),
sanitize.text.function = function(x){x},
file = "sim_result.tex")
library(MASS)
library(data.table)
library(dplyr)
library(xtable)
setwd("~/111-1/Labor Economic/HW1/src")
## Parameters settings
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
sigma_matrix = matrix(c(sigma0^2, sigma_01,
sigma_01, sigma1^2),
ncol=2)
C = 3
## Creating error terms, saving to data.table
wage = data.table(
mvrnorm(n=N,mu=c(0, 0),Sigma=sigma_matrix)
)
## Rename
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
## Creating variables
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
## Calculating the empirical conditional mean
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate the theoretical value
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = sqrt( sigma0^2 + sigma1^2 - 2 * sigma_01 )
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
## According to formula
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
## Compare
result = data.frame("$E_0$" = c(E_w0_I, calc_Q0), "$E_1$" = c(E_w1_I, calc_Q1))
rownames(result) = c("Simulation", "Theoretical")
print(
xtable(anova(fm3), caption = "Simulation result versus the theoretical result"),
floating = TRUE, latex.environments = "center")
print(
xtable(result, caption = "Simulation result versus the theoretical result"),
floating = TRUE, latex.environments = "center")
print(
xtable(result, caption = "Simulation result versus the theoretical result"),
floating = TRUE, latex.environments = "center",
sanitize.text.function=function(x){x})
## Compare
result = data.frame("Wage in source" = c(E_w0_I, calc_Q0), "Wage in host" = c(E_w1_I, calc_Q1))
print(
xtable(result, caption = "Simulation result versus the theoretical result"),
floating = TRUE, latex.environments = "center",
file="roy_sim.tex")
print(
xtable(result,
caption = "Simulation result versus the theoretical result",
lable = "tab:sim_res"),
floating = TRUE, latex.environments = "center",
file="roy_sim.tex")
print(
xtable(result,
caption = "Simulation result versus the theoretical result",
label = "tab:sim_res"),
floating = TRUE, latex.environments = "center",
file="roy_sim.tex")
library(MASS)
library(data.table)
library(dplyr)
library(xtable)
setwd("~/111-1/Labor Economic/HW1/src")
## Parameters settings
N = 1e7
mu0 = 10
mu1 = 15
sigma0 = 3
sigma1 = 4.5
sigma_01 = 2
sigma_matrix = matrix(c(sigma0^2, sigma_01,
sigma_01, sigma1^2),
ncol=2)
C = 3
## Creating error terms, saving to data.table
wage = data.table(
mvrnorm(n=N,mu=c(0, 0),Sigma=sigma_matrix)
)
## Rename
setnames(wage, "V1", "e0")
setnames(wage, "V2", "e1")
## Creating variables
wage[, W0 := e0 + mu0]
wage[, W1 := e1 + mu1]
wage[, Nu := e1 - e0]
wage[, I  := W1 > W0 + C]
## Calculating the empirical conditional mean
E_w0_I = wage[I==T, mean(W0)]
E_w1_I = wage[I==T, mean(W1)]
## Calculate the theoretical value
## Calculate rho_nu
rho = sigma_01/(sigma0 * sigma1)
sigma_nu = sqrt( sigma0^2 + sigma1^2 - 2 * sigma_01 )
## calculate z
z = (mu0 - mu1 + C)/sigma_nu
IMR = dnorm(z)/(1-pnorm(z))
## According to formula
calc_Q0 = mu0 + (sigma0 * sigma1)/sigma_nu * (rho - sigma0/sigma1) * IMR
calc_Q1 = mu1 + (sigma0 * sigma1)/sigma_nu * (sigma1/sigma0 - rho) * IMR
## Compare
result = data.frame("Wage in source" = c(E_w0_I, calc_Q0), "Wage in host" = c(E_w1_I, calc_Q1))
rownames(result) = c("Simulation", "Theoretical")
print(
xtable(result,
caption = "Simulation result versus the theoretical result",
label = "tab:sim_res"),
floating = TRUE, latex.environments = "center",
file="roy_sim.tex")
print(
xtable(result,
caption = "Simulation result versus the theoretical result",
label = "tab:sim_res",
digits=4),
floating = TRUE, latex.environments = "center",
file="roy_sim.tex")
print(
xtable(result,
caption = "Simulation result versus the theoretical result",
label = "tab:sim_res",
digits=5),
floating = TRUE, latex.environments = "center",
file="roy_sim.tex")
print(
xtable(result,
caption = "Simulation result versus the theoretical result",
label = "tab:sim_res",
digits=5),
floating = TRUE, latex.environments = "center",
file="roy_sim.tex")
re
result = data.frame("Source" = c(E_w0_I, calc_Q0), "Host" = c(E_w1_I, calc_Q1))
rownames(result) = c("Simulation", "Theoretical")
print(
xtable(result,
caption = "Simulation result versus the theoretical result",
label = "tab:sim_res",
digits=5),
floating = TRUE, latex.environments = "center",
file="roy_sim.tex")
